"""
Telegram –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç —á–µ—Ä–µ–∑ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ AI –º–æ–¥–µ–ª–∏
"""

import asyncio
import os
import tempfile
from pathlib import Path
import time

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from dotenv import load_dotenv
from openai import OpenAI

from file_utils import extract_docx, extract_pdf, extract_txt


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not BOT_TOKEN:
    print("–î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(
    token=BOT_TOKEN, 
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
FREE_MODELS = {
    "Qwen 2.5 72B": {
        "provider": "openrouter",
        "model": "qwen/qwen2.5-72b-instruct:free",
        "base_url": "https://openrouter.ai/api/v1",
        "api_key": os.getenv("OPENROUTER_API_KEY", "free")
    },
    "Llama 3.3 70B": {
        "provider": "openrouter", 
        "model": "meta-llama/llama-3.3-70b-instruct:free",
        "base_url": "https://openrouter.ai/api/v1",
        "api_key": os.getenv("OPENROUTER_API_KEY", "free")
    },
    "DeepSeek Coder": {
        "provider": "openrouter",
        "model": "deepseek/deepseek-coder:free",
        "base_url": "https://openrouter.ai/api/v1", 
        "api_key": os.getenv("OPENROUTER_API_KEY", "free")
    }
}

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
SUPPORTED_FORMATS = ['.pdf', '.docx', '.txt']
MAX_FILE_SIZE = 20 * 1024 * 1024  # 20 –ú–ë

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
user_files = {}

def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
         InlineKeyboardButton(text="ü§ñ –ú–æ–¥–µ–ª–∏", callback_data="models")],
        [InlineKeyboardButton(text="‚ö° –¢–µ—Å—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π", callback_data="test_all")]
    ])

def get_models_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ñ Qwen 2.5 72B", callback_data="model_qwen")],
        [InlineKeyboardButton(text="ü¶ô Llama 3.3 70B", callback_data="model_llama")],
        [InlineKeyboardButton(text="üíª DeepSeek Coder", callback_data="model_deepseek")],
        [InlineKeyboardButton(text="‚ö° –í—Å–µ –º–æ–¥–µ–ª–∏", callback_data="model_all")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

@dp.message(CommandStart())
async def start_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await message.answer(
        f"üéì <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n\n"
        "–Ø –ø—Ä–æ–≤–µ—Ä—è—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–º–æ—â—å—é 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π!\n\n"
        "üìÑ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª —Å —Ä–∞–±–æ—Ç–æ–π\n"
        "2. –í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "3. –ü–æ–ª—É—á–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n"
        "üìÅ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:</b> PDF, DOCX, TXT —Ñ–∞–π–ª—ã (–¥–æ 20 –ú–ë)\n"
        "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b> Qwen 2.5 72B, Llama 3.3 70B, DeepSeek Coder\n\n"
        "<i>–ú–æ–∂–µ—à—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏ —Å—Ä–∞–∑—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è! ‚ö°</i>",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await message.answer(
        "üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ AI –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "3Ô∏è‚É£ –ñ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (1-3 –º–∏–Ω—É—Ç—ã)\n"
        "4Ô∏è‚É£ –ü–æ–ª—É—á–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É\n\n"
        "<b>üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
        "‚Ä¢ PDF (–¥–æ 20 –ú–ë)\n"
        "‚Ä¢ DOCX (Microsoft Word)\n"
        "‚Ä¢ TXT (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã)\n\n"
        "<b>ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>\n"
        "‚Ä¢ <b>Qwen 2.5 72B</b> - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å\n"
        "‚Ä¢ <b>Llama 3.3 70B</b> - –æ—Ç Meta, —Ö–æ—Ä–æ—à–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞\n"  
        "‚Ä¢ <b>DeepSeek Coder</b> - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –∫–æ–¥\n\n"
        "<b>üìä –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è:</b>\n"
        "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –∏ —Ä–µ—à–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n"
        "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–æ–≤\n"
        "‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n\n"
        "<b>üí° –†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –û—Ü–µ–Ω–∫–∞ –∏–∑ 100 –±–∞–ª–ª–æ–≤ + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("models"))
async def models_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /models - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö"""
    await show_models_info(message)

async def show_models_info(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª—è—Ö"""
    models_text = "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ AI –º–æ–¥–µ–ª–∏:</b>\n\n"
    
    for model_name, config in FREE_MODELS.items():
        models_text += f"<b>{model_name}</b>\n"
        if model_name == "Qwen 2.5 72B":
            models_text += "‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç Alibaba\n‚Ä¢ –•–æ—Ä–æ—à–∞ –¥–ª—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n‚Ä¢ 72 –º–∏–ª–ª–∏–∞—Ä–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
        elif model_name == "Llama 3.3 70B":
            models_text += "‚Ä¢ –ú–æ–¥–µ–ª—å –æ—Ç Meta (Facebook)\n‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏\n‚Ä¢ 70 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n"
        elif model_name == "DeepSeek Coder":
            models_text += "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n‚Ä¢ –õ—É—á—à–µ –≤—Å–µ–≥–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞\n‚Ä¢ –ü–æ–Ω–∏–º–∞–µ—ÇÂ§öÁßç —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
    
    models_text += "‚ö° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π '–¢–µ—Å—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π' –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!"
    
    await message.answer(
        models_text,
        reply_markup=get_models_keyboard()
    )

@dp.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    """–ü–æ–º–æ—â—å —á–µ—Ä–µ–∑ callback"""
    await help_command(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "models")
async def models_callback(callback: CallbackQuery):
    """–ú–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ callback"""
    await show_models_info(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "test_all")
async def test_all_callback(callback: CallbackQuery):
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ callback"""
    await callback.message.answer(
        "‚ö° <b>–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π, –∏ —è –∑–∞–ø—É—â—É –ø—Ä–æ–≤–µ—Ä–∫—É "
        "–≤–æ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –º–æ–¥–µ–ª—è—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!\n\n"
        "–≠—Ç–æ –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã, –Ω–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "back_main")
async def back_main_callback(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.answer(
        "üîô <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.message(F.text & ~F.text.startswith('/'))
async def handle_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "üìÑ <b>–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!</b>\n\n"
        "–Ø –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é: PDF, DOCX, TXT\n\n"
        "<i>–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</i>",
        reply_markup=get_main_keyboard()
    )

@dp.message(F.document)
async def handle_document(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞"""
    document = message.document
    file_name = document.file_name
    file_size = document.file_size
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    if file_size > MAX_FILE_SIZE:
        await message.answer(
            f"‚ùå <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!</b>\n\n"
            f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / 1024 / 1024:.1f} –ú–ë\n"
            f"üìè –ú–∞–∫—Å–∏–º—É–º: {MAX_FILE_SIZE / 1024 / 1024} –ú–ë\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π —Å–∂–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    file_ext = Path(file_name).suffix.lower()
    if file_ext not in SUPPORTED_FORMATS:
        await message.answer(
            f"‚ùå <b>–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            f"üìÑ –¢–≤–æ–π —Ñ–∞–π–ª: <code>{file_ext}</code>\n"
            f"üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é: <code>{', '.join(SUPPORTED_FORMATS)}</code>\n\n"
            f"–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —Ñ–∞–π–ª –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status_msg = await message.answer(
        "‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...</b>\n\n"
        "üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª\n"
        "‚è≥ –ò–∑–≤–ª–µ–∫–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n\n"
        "<i>–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</i>"
    )
    
    temp_path = None
    user_id = message.from_user.id
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(document.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix=file_ext, delete=False) as tmp_file:
            await bot.download_file(file.file_path, tmp_file.name)
            temp_path = tmp_file.name
        
        await status_msg.edit_text(
            "‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...</b>\n\n"
            "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω\n"
            "üîÑ –ò–∑–≤–ª–µ–∫–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n"
            "‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–Ω–∞–ª–∏–∑—É"
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if file_ext == '.txt':
            content = await extract_txt(temp_path)
        elif file_ext == '.docx':
            content = await extract_docx(temp_path)
        elif file_ext == '.pdf':
            content = await extract_pdf(temp_path)
        else:
            raise Exception("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        if not content.strip():
            raise Exception("–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Ç–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_files[user_id] = {
            'content': content,
            'file_name': file_name,
            'file_size': file_size,
            'status_msg': status_msg
        }
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if temp_path:
            os.unlink(temp_path)
        
        await status_msg.edit_text(
            f"‚úÖ <b>–§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É!</b>\n\n"
            f"üìÑ <b>–§–∞–π–ª:</b> <code>{file_name}</code>\n"
            f"üìä <b>–†–∞–∑–º–µ—Ä:</b> {file_size / 1024:.1f} –ö–ë\n"
            f"üìù <b>–°–∏–º–≤–æ–ª–æ–≤:</b> {len(content):,}\n\n"
            f"<b>–í—ã–±–µ—Ä–∏ AI –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>",
            reply_markup=get_models_keyboard()
        )
        
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if temp_path:
            try:
                os.unlink(temp_path)
            except:
                pass
        
        await status_msg.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:</b>\n\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.",
            reply_markup=get_main_keyboard()
        )

async def check_with_ai(content: str, model_name: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—É—é AI –º–æ–¥–µ–ª—å"""
    
    model_config = FREE_MODELS[model_name]
    
    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é –æ—Ü–µ–Ω–∫—É.

–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò (100 –±–∞–ª–ª–æ–≤ –º–∞–∫—Å–∏–º—É–º):
1. –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –∏ —Ä–µ—à–µ–Ω–∏—è (0-30 –±–∞–ª–ª–æ–≤)
2. –ü–æ–ª–Ω–æ—Ç–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (0-30 –±–∞–ª–ª–æ–≤)  
3. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (0-20 –±–∞–ª–ª–æ–≤)
4. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç—ã (0-20 –±–∞–ª–ª–æ–≤)

–°–û–î–ï–†–ñ–ò–ú–û–ï –†–ê–ë–û–¢–´:
{content[:12000]}  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π

–î–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É:
- –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ä–∞–±–æ—Ç–∞
- –û—Ü–µ–Ω–∏ –∫–∞–∂–¥—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
- –£–∫–∞–∂–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
- –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
- –ü–æ—Å—Ç–∞–≤—å –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∏–∑ 100 –±–∞–ª–ª–æ–≤

–ë—É–¥—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤, –Ω–æ —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª–µ–Ω. –ü–∏—à–∏ –ø–æ–Ω—è—Ç–Ω–æ –¥–ª—è —Å—Ç—É–¥—Ç–µ–ª—è.
"""
    
    try:
        client = OpenAI(
            base_url=model_config["base_url"],
            api_key=model_config["api_key"] or "free"
        )
        
        start_time = time.time()
        
        response = client.chat.completions.create(
            model=model_config["model"],
            messages=[
                {"role": "user", "content": prompt}
            ],
            max_tokens=1200,
            temperature=0.3
        )
        
        processing_time = time.time() - start_time
        
        result = response.choices[0].message.content
        return f"{result}\n\n‚è±Ô∏è <i>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f} —Å–µ–∫.</i>"
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {model_name}: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."

async def check_with_all_models(content: str, file_info: dict) -> list:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –≤—Å–µ –º–æ–¥–µ–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    tasks = []
    
    for model_name in FREE_MODELS.keys():
        task = asyncio.create_task(check_with_ai(content, model_name))
        tasks.append((model_name, task))
    
    results = []
    for model_name, task in tasks:
        try:
            result = await task
            results.append((model_name, result))
        except Exception as e:
            results.append((model_name, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"))
    
    return results

@dp.callback_query(F.data.startswith("model_"))
async def process_model_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    user_id = callback.from_user.id
    
    if user_id not in user_files:
        await callback.message.answer(
            "‚ùå <b>–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π.",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()
        return
    
    file_data = user_files[user_id]
    content = file_data['content']
    file_name = file_data['file_name']
    
    model_type = callback.data.replace("model_", "")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏
    await callback.message.delete()
    
    if model_type == "all":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ–º–∏ –º–æ–¥–µ–ª—è–º–∏
        status_msg = await callback.message.answer(
            "‚ö° <b>–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ–º–∏ –º–æ–¥–µ–ª—è–º–∏...</b>\n\n"
            "üîÑ Qwen 2.5 72B - –∑–∞–ø—É—â–µ–Ω–∞\n"
            "üîÑ Llama 3.3 70B - –∑–∞–ø—É—â–µ–Ω–∞\n" 
            "üîÑ DeepSeek Coder - –∑–∞–ø—É—â–µ–Ω–∞\n\n"
            "<i>–≠—Ç–æ –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã...</i>"
        )
        
        results = await check_with_all_models(content, file_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await status_msg.edit_text(
            f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìÑ <b>–§–∞–π–ª:</b> <code>{file_name}</code>\n"
            f"üìä <b>–°–∏–º–≤–æ–ª–æ–≤:</b> {len(content):,}\n"
            f"ü§ñ <b>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª–µ–π:</b> {len(results)}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        for model_name, result in results:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–µ–ª–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            formatted_result = f"ü§ñ <b>{model_name}:</b>\n\n{result}"
            
            if len(formatted_result) > 4000:
                parts = [formatted_result[i:i+4000] for i in range(0, len(formatted_result), 4000)]
                for i, part in enumerate(parts):
                    if i == 0:
                        await callback.message.answer(part)
                    else:
                        await callback.message.answer(f"üìã <b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {model_name} ({i+1}):</b>\n\n{part}")
            else:
                await callback.message.answer(formatted_result)
        
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        model_map = {
            "qwen": "Qwen 2.5 72B",
            "llama": "Llama 3.3 70B", 
            "deepseek": "DeepSeek Coder"
        }
        
        selected_model = model_map.get(model_type)
        if not selected_model:
            await callback.answer()
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–¥–Ω–æ–π –º–æ–¥–µ–ª—å—é
        status_msg = await callback.message.answer(
            f"‚è≥ <b>–ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–±–æ—Ç—É...</b>\n\n"
            f"ü§ñ –ú–æ–¥–µ–ª—å: {selected_model}\n"
            f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n\n"
            f"<i>–û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã</i>"
        )
        
        result = await check_with_ai(content, selected_model)
        
        await status_msg.edit_text(
            f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìÑ <b>–§–∞–π–ª:</b> <code>{file_name}</code>\n"
            f"ü§ñ <b>–ú–æ–¥–µ–ª—å:</b> {selected_model}\n"
            f"üìù <b>–°–∏–º–≤–æ–ª–æ–≤:</b> {len(content):,}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        formatted_result = f"üìã <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ ({selected_model}):</b>\n\n{result}"
        
        if len(formatted_result) > 4000:
            parts = [formatted_result[i:i+4000] for i in range(0, len(formatted_result), 4000)]
            for i, part in enumerate(parts):
                if i == 0:
                    await callback.message.answer(part)
                else:
                    await callback.message.answer(f"üìã <b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ({i+1}):</b>\n\n{part}")
        else:
            await callback.message.answer(formatted_result)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ
    await callback.message.answer(
        "üéâ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
        "–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ üìÑ",
        reply_markup=get_main_keyboard()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_files:
        del user_files[user_id]
    
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç...")
    print("üìÑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOCX, TXT")
    print("ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: Qwen 2.5 72B, Llama 3.3 70B, DeepSeek Coder")
    print("‚ö° –†–µ–∂–∏–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    print("-" * 50)
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("\n –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())